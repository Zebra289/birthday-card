{"version":3,"sources":["components/CodeLetter.tsx","components/Alert.tsx","components/HelpPopup.tsx","components/Code.tsx","components/MessageLetter.tsx","components/Message.tsx","App.tsx","hooks/useCode.ts","index.tsx"],"names":["CodeLetter","props","classes","useStyles","TextField","variant","label","letterPair","index","value","guess","onChange","e","target","letterGuess","error","length","className","found","makeStyles","borderRadius","border","Alert","handleClose","setOpen","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","correct","letters","alertContent","DialogActions","Button","onClick","color","autoFocus","HelpPopup","React","useState","root","theme","createStyles","width","spacing","Code","alertOpen","setAlertOpen","letterPairs","map","l","letter","button","checkGuesses","display","flexWrap","margin","height","MessageLetter","Paper","elevation","number","showLetterOrBlank","textAlign","padding","fontSize","Message","i","App","setLetters","message","setMessage","shuffleArray","array","j","Math","floor","random","setUp","alphaNumbers","Array","from","x","String","fromCharCode","newMessage","secret","a","match","find","toUpperCase","newIndex","undefined","push","newLetters","m","useCode","useEffect","code","Divider","position","bottom","left","containter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c016c4af.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { CodeLetterProps } from '../models/ComponentProps';\n\nexport default function CodeLetter(props: CodeLetterProps): JSX.Element {\n    const classes = useStyles();\n\n    const letterGuessed = (guess: string) => {\n        props.letterGuess(guess, props.letterPair.index);\n    }\n\n    const isError = () : boolean => {\n        if (props.letterPair.guess)\n            if (props.letterPair.guess.length > 1)\n                return true;\n            else\n                return false;\n        return false;\n    }\n\n    return (\n        <TextField \n            variant=\"filled\" \n            label={props.letterPair?.index} \n            value={props.letterPair.guess} \n            onChange={(e) => letterGuessed(e.target.value)}\n            error={isError()}\n            className={props.letterPair.found ? classes.found : \"\"}\n        />\n    );\n}\n\nconst useStyles = makeStyles({\n    found: {\n        borderRadius: 5,\n        //borderColor: 'green',\n        border: '1px outset green',\n    },\n});","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { AlertProps } from '../models/ComponentProps';\n\nexport default function Alert(props: AlertProps) {\n  const handleClose = () => {\n    props.setOpen(false);\n  };\n\n  const alertContent = () => {\n    var correct = 0;\n    for (var l of props.letters)\n        if (l.found)\n            correct++;\n\n    if (correct === 26)\n        return \"Congratulations, you got them all! You smashed it :)\";\n    return \"Nice work, you've got \" + correct + \" so far. Keep going and you'll get there :)\";\n  }\n\n  return (\n      <Dialog\n        open={props.open}\n        onClose={handleClose}\n      >\n        <DialogTitle>{\"Great work!\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {alertContent()}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Back to the game\n          </Button>\n        </DialogActions>\n      </Dialog>\n  );\n}\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport React from 'react';\n\nexport default function HelpPopup() {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n      <div>\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen} className={classes.root}>\n            Show help text\n        </Button>\n        <Dialog\n            open={open}\n            onClose={handleClose}\n        >\n            <DialogTitle>{\"Happy Father's Day! So, here's how it works!\"}</DialogTitle>\n            <DialogContent>\n            <DialogContentText>\n                The top half is a message from me to you. Fill in the letters in the bottom half. This will populate them into the message. When you're ready to double check your answers, click the \"Check Guesses\" button to see how many you've got right :) <br/><br/> Have fun, Love Danii xx\n            </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\n                Got it!\n            </Button>\n            </DialogActions>\n        </Dialog>\n      </div>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        width: theme.spacing(24),\n    },\n  })\n);","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { CodeProps } from '../models/ComponentProps';\nimport CodeLetter from './CodeLetter';\nimport React from 'react';\nimport Alert from './Alert';\nimport HelpPopup from './HelpPopup';\n\nexport default function Code(props: CodeProps): JSX.Element {\n    const classes = useStyles();\n    const [alertOpen, setAlertOpen] = React.useState(false);\n    \n    const letterPairs = props.letters.map(l => {\n      return <CodeLetter key={l.guess+\"\"+l.letter} letterPair={l} letterGuess={props.letterGuess}/>\n    });\n\n    const checkGuesses = () => {\n      props.checkGuesses();\n      setAlertOpen(true);\n    }\n\n    return (\n        <div>\n          <div className={classes.root}>\n            {letterPairs}\n              \n            <Button variant=\"contained\" color=\"secondary\" className={classes.button} onClick={checkGuesses}>\n              Check Guesses\n            </Button>\n            <Alert open={alertOpen} setOpen={setAlertOpen} letters={props.letters}/>\n            <HelpPopup />\n          </div>\n        </div>\n        \n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(1),\n        height: theme.spacing(8),\n        width: theme.spacing(8),\n      },\n    },\n    button: {\n        width: theme.spacing(16),\n    },\n  })\n);\n","import { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { MessageLetterProps } from '../models/ComponentProps';\nimport React from 'react';\n\nexport default function MessageLetter(props: MessageLetterProps): JSX.Element {\n    const classes = useStyles();\n\n    const showLetterOrBlank = () => {\n        if (props.letterPair.index)\n            return props.letterPair.guess;\n        return props.letterPair?.letter;\n    }\n\n    const elevation = () => {\n        if (props.letterPair.index)\n            if (props.letterPair?.found)\n                return 2;\n            else\n                return 8;\n        return 0;\n    }\n\n    return (\n        <Paper elevation={elevation()}>\n            <div className={classes.number}>\n                {props.letterPair.index ?? \".\"}\n            </div>\n            <strong className={classes.letter}>\n                {showLetterOrBlank()}\n            </strong>\n        </Paper>\n    );\n}\n\nconst useStyles = makeStyles({\n    number: {\n        textAlign: 'right',\n        padding: '2px'\n    },\n    letter: {\n        textAlign: 'center',\n        fontSize: '24px',\n    }\n});","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { MessageProps } from '../models/ComponentProps';\nimport MessageLetter from './MessageLetter';\n\nexport default function Message(props: MessageProps): JSX.Element {\n    const classes = useStyles();\n    \n    const letterPairs = props.letters.map((l, i) => {\n      return <MessageLetter key={l.guess+\"\"+i} letterPair={l} />\n    });\n\n    return (\n      <div className={classes.root}>\n        {letterPairs}\n      </div>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(1),\n        width: theme.spacing(8),\n        height: theme.spacing(8),\n      },\n    },\n  })\n);\n","import React from 'react';\nimport './App.css';\nimport Code from './components/Code';\nimport Message from './components/Message';\nimport { useCode } from './hooks/useCode';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default function App() {\n  const classes = useStyles();\n  const { setUp, letters, message, letterGuess, checkGuesses } = useCode();\n\n  React.useEffect(() => {\n    setUp(); // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Message letters={message}/>\n    \n      <div className={classes.code}>\n        <Divider />\n        <Code letters={letters} letterGuess={letterGuess} checkGuesses={checkGuesses}/>\n      </div>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles({\n  code: {\n    position: \"absolute\",\n    bottom: \"0\",\n    left: \"0\",\n  },\n  containter: {\n    \n  }\n});","import React from 'react';\nimport { CodePair, LetterPair } from '../models/LetterPair';\nimport { secret } from '../components/SecretMessage.json';\n\nexport function useCode() {\n    const [letters, setLetters] = React.useState<CodePair[]>([]);\n    const [message, setMessage] = React.useState<LetterPair[]>([]);\n\n    const setUp = () => {\n        var alphaNumbers = Array.from(Array(26)).map((e, i) => i + 65);\n        shuffleArray(alphaNumbers);\n\n        var letterPairs = alphaNumbers.map((x, i) => \n            { return {\n                letter: String.fromCharCode(x),\n                found: false,\n                index: i + 1\n            } as CodePair});\n        setLetters(letterPairs);\n\n        var newMessage = [] as LetterPair[];\n        for (var a of secret) {\n            // eslint-disable-next-line\n            var match = letterPairs.find(l => l.letter === a.toUpperCase());\n            var newIndex: number | undefined = undefined;\n            if (match)\n                newIndex = match.index;\n            \n            newMessage.push({\n                letter: a,\n                found: false,\n                index: newIndex,\n                guess: \"_\"\n            } as LetterPair);\n        }\n        setMessage(newMessage);\n    }\n\n    const letterGuess = (guess: string, index: number) => {\n        var newLetters = [...letters];\n        newLetters[index-1].guess = guess.toUpperCase();\n        setLetters(newLetters);\n        \n        if (guess === \"\") guess = \"_\";\n\n        var newMessage = [...message];\n        for (var m of newMessage)\n            if (m.index === index)\n                m.guess = guess.toUpperCase();\n        setMessage(newMessage);\n    }\n\n    const checkGuesses = () => {\n        var newLetters = [...letters];\n        for (var l of newLetters)\n            if (!l.found && l.guess?.toUpperCase() === l.letter)\n                l.found = true;\n        setLetters(newLetters);\n    }\n\n    const shuffleArray = (array: number[]) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n    \n    return {\n        setUp, checkGuesses, letterGuess, letters, message\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}