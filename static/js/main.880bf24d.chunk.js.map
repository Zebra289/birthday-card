{"version":3,"sources":["components/MessageLetter.tsx","components/Message.tsx","App.tsx","hooks/useCode.ts","index.tsx"],"names":["MessageLetter","props","classes","useStyles","Paper","elevation","letterPair","found","className","number","index","letter","makeStyles","textAlign","fontSize","Message","root","theme","createStyles","display","flexWrap","margin","spacing","width","height","App","React","useState","letters","setLetters","shuffleArray","array","i","length","j","Math","floor","random","setUp","alphaNumbers","Array","from","map","e","letterPairs","x","String","fromCharCode","console","log","letterIsFound","isFound","find","l","toUpperCase","letterGuess","guess","useCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAKe,SAASA,EAAcC,GAAyC,IAAD,EACpEC,EAAUC,IAiBhB,OACI,eAACC,EAAA,EAAD,CAAOC,UAPO,WAAO,IAAD,EACpB,iBAAIJ,EAAMK,kBAAV,aAAI,EAAkBC,OACX,EACJ,GAIWF,GAAlB,UACI,qBAAKG,UAAWN,EAAQO,OAAxB,mBACKR,EAAMK,kBADX,aACK,EAAkBI,QAEvB,oBAAIF,UAAWN,EAAQS,OAAvB,SAnBAV,EAAMK,WACFL,EAAMK,WAAWC,MACVN,EAAMK,WAAWK,OAEjB,IACR,QAqBf,IAAMR,EAAYS,YAAW,CACzBH,OAAQ,CACJI,UAAW,SAEfF,OAAQ,CACJE,UAAW,SACXC,SAAU,UCpCH,SAASC,EAAQd,GAC5B,IAAMC,EAAUC,IACVG,EAAa,CACfK,OAAQ,IACRJ,OAAO,EACPG,MAAO,GAGX,OACI,sBAAKF,UAAWN,EAAQc,KAAxB,UACI,cAAChB,EAAD,CAAeM,WAAYA,IAC3B,cAACN,EAAD,CAAeM,WAAYA,IAC3B,cAACN,EAAD,CAAeM,WAAYA,IAC3B,cAACN,EAAD,IACA,cAACA,EAAD,CAAeM,WAAYA,IAC3B,cAACN,EAAD,CAAeM,WAAYA,OAKvC,IAAMH,EAAYS,aAAW,SAACK,GAAD,OAC3BC,YAAa,CACXF,KAAM,CACJG,QAAS,OACTC,SAAU,OACV,QAAS,CACPC,OAAQJ,EAAMK,QAAQ,GACtBC,MAAON,EAAMK,QAAQ,IACrBE,OAAQP,EAAMK,QAAQ,W,QClBfG,MAVf,WAAgB,IAAD,ECFR,WAAoB,IAAD,EACQC,IAAMC,SAAuB,IADrC,mBACfC,EADe,KACNC,EADM,KAgChBC,EAAe,SAACC,GAClB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,OAM/C,MAAO,CACHI,MArCU,WACV,IAAIC,EAAeC,MAAMC,KAAKD,MAAM,KAAKE,KAAI,SAACC,EAAGX,GAAJ,OAAUA,EAAI,MAC3DF,EAAaS,GAEb,IAAIK,EAAcL,EAAaG,KAAI,SAACG,EAAGb,GACjC,MAAO,CACLrB,OAAQmC,OAAOC,aAAaF,GAC5BtC,OAAO,EACPG,MAAOsB,MAEfH,EAAWe,GAEXI,QAAQC,IAAIL,IAyBLM,cAtBW,SAACvC,GAA8B,IAAD,EAC5CwC,EAAUvB,EAAQwB,MAAK,SAAAC,GAAC,OAAIA,EAAE1C,QAAUA,EAAO2C,iBACnD,wBAAOH,QAAP,IAAOA,OAAP,EAAOA,EAAS5C,aAAhB,UAoBsBgD,YAjBN,SAAC5C,EAAgBD,GACjC,IAAI8C,EAAQ5B,EAAQlB,GACpB,OAAI8C,EAAM7C,QAAUA,EAAO2C,gBACvBE,EAAMjD,OAAQ,GACP,IAawBqB,WDrCd6B,GAAZ7B,GADF,EACLU,MADK,EACEV,SAEf,OACE,qBAAKpB,UAAU,MAAf,SACE,cAACO,EAAD,CAASa,QAASA,OELxB8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.880bf24d.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { LetterPair } from \"../models/LetterPair\";\nimport { MessageLetterProps } from '../models/ComponentProps';\n\nexport default function MessageLetter(props: MessageLetterProps): JSX.Element {\n    const classes = useStyles();\n\n    const showLetterOrBlank = () => {\n        if (props.letterPair)\n            if (props.letterPair.found)\n                return props.letterPair.letter;\n            else\n                return \"_\";\n        return \"\";\n    }\n\n    const elevation = () => {\n        if (props.letterPair?.found)\n            return 5;\n        return 10;\n    }\n\n    return (\n        <Paper elevation={elevation()}>\n            <div className={classes.number}>\n                {props.letterPair?.index}\n            </div>\n            <h2 className={classes.letter}>\n                {showLetterOrBlank()}\n            </h2>\n        </Paper>\n    );\n}\n\nconst useStyles = makeStyles({\n    number: {\n        textAlign: 'right'\n    },\n    letter: {\n        textAlign: 'center',\n        fontSize: '40px'\n    }\n});","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { MessageProps } from '../models/ComponentProps';\nimport { LetterPair } from \"../models/LetterPair\";\nimport MessageLetter from './MessageLetter';\n\nexport default function Message(props: MessageProps): JSX.Element {\n    const classes = useStyles();\n    const letterPair = {\n        letter: \"A\",\n        found: false,\n        index: 2\n    } as LetterPair;\n\n    return (\n        <div className={classes.root}>\n            <MessageLetter letterPair={letterPair}/>\n            <MessageLetter letterPair={letterPair}/>\n            <MessageLetter letterPair={letterPair}/>\n            <MessageLetter />\n            <MessageLetter letterPair={letterPair}/>\n            <MessageLetter letterPair={letterPair}/>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(1),\n        width: theme.spacing(16),\n        height: theme.spacing(16),\n      },\n    },\n  })\n);\n","import React from 'react';\nimport './App.css';\nimport Message from './components/Message';\nimport { useCode } from './hooks/useCode';\n\nfunction App() {\n  const { setUp, letters } = useCode();\n\n  return (\n    <div className=\"App\">\n      <Message letters={letters}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { LetterPair } from '../models/LetterPair';\n\nexport function useCode() {\n    const [letters, setLetters] = React.useState<LetterPair[]>([]);\n\n    const setUp = () => {\n        var alphaNumbers = Array.from(Array(26)).map((e, i) => i + 65);\n        shuffleArray(alphaNumbers);\n\n        var letterPairs = alphaNumbers.map((x, i) => \n            { return {\n                letter: String.fromCharCode(x),\n                found: false,\n                index: i\n            } as LetterPair});\n        setLetters(letterPairs);\n\n        console.log(letterPairs);\n    }\n\n    const letterIsFound = (letter: string) : boolean => {\n        var isFound = letters.find(l => l.letter == letter.toUpperCase());\n        return isFound?.found ?? false;\n    }\n\n    const letterGuess = (letter: string, index: number) : boolean => {\n        var guess = letters[index];\n        if (guess.letter == letter.toUpperCase()) {\n            guess.found = true;\n            return true;\n        }\n        return false;\n    }\n\n    const shuffleArray = (array: number[]) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n    \n    return {\n        setUp, letterIsFound, letterGuess, letters\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}